{"version":3,"sources":["components/Card.js","components/Board.js","components/Modal.js","data.js","utils.js","App.js","reportWebVitals.js","index.js"],"names":["Card","card","handleClick","useState","className","onClick","value","Board","cards","timer","flipCard","id","map","ReactModal","setAppElement","Modal","isOpen","startGame","modalView","view","setView","useEffect","views","start","results","setNotVisible","card1","card2","data","i","push","App","setCards","setTimer","cardToCheck","setCardToCheck","matchedCards","setMatchedCards","busy","setBusy","timerId","setTimerId","timeOutId","setTimeOutId","isOpenModal","setIsOpenModal","setModalView","checkForCardMatch","cardMatch","cardMismatch","setTimeout","setMatched","concat","finishGame","clearInterval","openModal","resetCards","closeModal","length","clearTimeout","cardsCopy","randIndex","Math","floor","random","temp","shuffleCards","setInterval","seconds","cardToFlip","cardToSet","setVisible","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9f29805.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst Card = ({ card, handleClick }) => {\n  const [visible, setVisible] = useState(false);\n  return (\n    <div className={card.className}>\n      <div className=\"card-back card-face\" onClick={handleClick}>\n        back\n      </div>\n      <div className=\"card-front card-face\">{card.value}</div>\n    </div>\n  );\n};\n\nexport default Card;\n","import { useState, useEffect } from 'react';\n\nimport Card from './Card';\n\nconst Board = ({ cards, timer, flipCard }) => {\n  return (\n    <div className=\"game-container\">\n      <p className=\"game-info\">\n        Time: <span id=\"time-remaining\">{timer}</span>\n      </p>\n      {cards.map(card => (\n        <Card key={card.id} card={card} handleClick={() => flipCard(card)} />\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","import { useState, useEffect } from 'react';\nimport ReactModal from 'react-modal';\n\nReactModal.setAppElement('#root');\n\nconst Modal = ({ isOpen, startGame, modalView }) => {\n  const [view, setView] = useState('');\n\n  useEffect(() => {\n    setView(modalView);\n  }, [modalView]);\n\n  const views = {\n    start: (\n      <>\n        Start Game\n        <button onClick={startGame}>Start Game</button>\n        <button onClick={() => setView('results')}>Show results</button>\n      </>\n    ),\n    results: (\n      <>\n        Results\n        <button onClick={() => setView('start')}>Back</button>\n      </>\n    )\n  };\n\n  return <ReactModal isOpen={isOpen}>{views[view]}</ReactModal>;\n};\n\nexport default Modal;\n","const data = [];\nfor (let i = 1; i <= 18; i += 1) {\n  data.push({ id: i, value: i, className: 'card' });\n  data.push({ id: i + 18, value: i, className: 'card' });\n}\n\nexport default data;\n","export const shuffleCards = cards => {\n  const cardsCopy = [...cards];\n  for (let i = cardsCopy.length - 1; i > 0; i--) {\n    let randIndex = Math.floor(Math.random() * (i + 1));\n    const temp = cardsCopy[randIndex];\n    cardsCopy[randIndex] = cardsCopy[i];\n    cardsCopy[i] = temp;\n  }\n  return cardsCopy;\n};\n\nexport const setVisible = (cards, cardToSet) =>\n  cards.map(card => {\n    if (card.id === cardToSet.id) {\n      return { ...card, className: 'card visible' };\n    }\n    return card;\n  });\n\nexport const setNotVisible = (cards, card1, card2 = {}) =>\n  cards.map(card => {\n    if (card.id === card1.id) {\n      return { ...card, className: 'card' };\n    } else if (card.id === card2.id) {\n      return { ...card, className: 'card' };\n    }\n    return card;\n  });\n\nexport const setMatched = (cards, card1, card2) =>\n  cards.map(card => {\n    if (card.id === card1.id) {\n      return { ...card, className: 'card matched' };\n    } else if (card.id === card2.id) {\n      return { ...card, className: 'card matched' };\n    }\n    return card;\n  });\n\nexport const resetCards = cards =>\n  cards.map(card => ({ ...card, className: 'card' }));\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Modal from './components/Modal';\nimport {\n  shuffleCards,\n  setVisible,\n  setNotVisible,\n  setMatched,\n  resetCards\n} from './utils';\nimport data from './data';\n\nfunction App() {\n  const [cards, setCards] = useState(data);\n  const [timer, setTimer] = useState(0);\n  const [cardToCheck, setCardToCheck] = useState(null);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [busy, setBusy] = useState(false);\n\n  const [timerId, setTimerId] = useState(null);\n  const [timeOutId, setTimeOutId] = useState(null);\n  const [isOpenModal, setIsOpenModal] = useState(true);\n  const [modalView, setModalView] = useState('start');\n\n  const startGame = () => {\n    setCards(shuffleCards(cards));\n    setTimer(0);\n    setTimerId(setInterval(() => setTimer(seconds => seconds + 1), 1000));\n    closeModal();\n  };\n\n  const flipCard = cardToFlip => {\n    if (!busy) {\n      setCards(setVisible(cards, cardToFlip));\n\n      if (cardToCheck) {\n        checkForCardMatch(cardToFlip);\n        clearTimeout(timeOutId);\n      } else {\n        setCardToCheck(cardToFlip);\n        setTimeOutId(\n          setTimeout(() => {\n            setCards(setNotVisible(cards, cardToFlip));\n            setCardToCheck(null);\n          }, 5000)\n        );\n      }\n    }\n  };\n\n  const checkForCardMatch = card => {\n    if (card.value === cardToCheck.value) {\n      cardMatch(card, cardToCheck);\n    } else {\n      cardMismatch(card, cardToCheck);\n    }\n    setCardToCheck(null);\n  };\n\n  const cardMatch = (card1, card2) => {\n    setBusy(true);\n    setTimeout(() => {\n      setCards(setMatched(cards, card1, card2));\n      setMatchedCards(matchedCards.concat([card1, card2]));\n      setBusy(false);\n    }, 1000);\n  };\n\n  const cardMismatch = (card1, card2) => {\n    setBusy(true);\n    setTimeout(() => {\n      setCards(setNotVisible(cards, card1, card2));\n      setBusy(false);\n    }, 1000);\n  };\n\n  const finishGame = () => {\n    clearInterval(timerId);\n    setModalView('results');\n    openModal();\n    setCards(resetCards(cards));\n    setMatchedCards([]);\n  };\n\n  const openModal = () => {\n    setIsOpenModal(true);\n  };\n\n  const closeModal = () => {\n    setIsOpenModal(false);\n  };\n\n  useEffect(() => {\n    if (matchedCards.length === cards.length) finishGame();\n  }, [matchedCards]);\n\n  useEffect(() => {\n    return () => {\n      clearInterval(timerId);\n      clearTimeout(timeOutId);\n    };\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"page-title\">Memory Game</h1>\n      <Modal isOpen={isOpenModal} startGame={startGame} modalView={modalView} />\n      <Board cards={cards} timer={timer} flipCard={flipCard} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}