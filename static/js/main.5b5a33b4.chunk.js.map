{"version":3,"sources":["assets/sprite.svg","components/Card.js","components/Board.js","components/Modal.js","data/data.js","utils/utils.js","App.js","reportWebVitals.js","index.js"],"names":["Card","card","handleClick","className","onClick","height","href","sprite","value","Board","cards","timer","flipCard","map","id","title","ReactModal","setAppElement","Modal","isOpen","startGame","modalView","setModalView","results","views","start","result","index","setNotVisible","card1","card2","data","i","push","App","useState","setCards","setTimer","cardToCheck","setCardToCheck","matchedCards","setMatchedCards","busy","setBusy","setResults","timerId","setTimerId","timeOutId","setTimeOutId","isOpenModal","setIsOpenModal","checkForCardMatch","cardMatch","cardMismatch","setTimeout","setMatched","concat","finishGame","clearInterval","openModal","resetCards","res","sort","a","b","slice","localStorage","setItem","JSON","stringify","e","console","log","addResult","closeModal","useEffect","length","fromLocalStorage","parse","getItem","clearTimeout","cardsCopy","randIndex","Math","floor","random","temp","shuffleCards","setInterval","seconds","cardToFlip","cardToSet","setVisible","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b5a33b4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sprite.a2073b15.svg\";","import sprite from '../assets/sprite.svg';\n\nconst Card = ({ card, handleClick }) => {\n  return (\n    <div className={card.className}>\n      <div className=\"card-back card-face\" onClick={handleClick}></div>\n      <div className=\"card-front card-face\">\n        <svg height={50}>\n          <use href={`${sprite}#icon-${card.value}`} />\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import { useState, useEffect } from 'react';\n\nimport Card from './Card';\n\nconst Board = ({ cards, timer, flipCard }) => {\n  return (\n    <div className=\"game-container\">\n      <p className=\"game-info\">Time: {timer}</p>\n      {cards.map(card => (\n        <Card key={card.id} card={card} handleClick={() => flipCard(card)} />\n      ))}\n      <div className=\"icons-attribute\">\n        Icons made by{' '}\n        <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">\n          Freepik\n        </a>{' '}\n        from{' '}\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\n          www.flaticon.com\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import ReactModal from 'react-modal';\n\nReactModal.setAppElement('#root');\n\nconst Modal = ({\n  isOpen,\n  startGame,\n  modalView,\n  setModalView,\n  results,\n  timer\n}) => {\n  const views = {\n    start: (\n      <div className=\"start-container\">\n        <h1 className=\"page-title\">Memory Game</h1>\n        <button className=\"start-button\" onClick={startGame}>\n          Start Game\n        </button>\n        <button\n          className=\"results-button\"\n          onClick={() => setModalView('results')}\n        >\n          Show results\n        </button>\n      </div>\n    ),\n    results: (\n      <div className=\"results-container\">\n        {timer > 0 && <p>Your time: {timer}</p>}\n        <p>Best results:</p>\n        <ul className=\"results-list\">\n          {results.map((result, index) => (\n            <li className=\"results-item\" key={index}>\n              {result}\n            </li>\n          ))}\n        </ul>\n        <button\n          className=\"results-button\"\n          onClick={() => setModalView('start')}\n        >\n          Back\n        </button>\n      </div>\n    )\n  };\n\n  return <ReactModal isOpen={isOpen}>{views[modalView]}</ReactModal>;\n};\n\nexport default Modal;\n","const data = [];\nfor (let i = 1; i <= 18; i += 1) {\n  data.push({ id: i, value: i, className: 'card' });\n  data.push({ id: i + 18, value: i, className: 'card' });\n}\n\nexport default data;\n","export const shuffleCards = cards => {\n  const cardsCopy = [...cards];\n  for (let i = cardsCopy.length - 1; i > 0; i--) {\n    let randIndex = Math.floor(Math.random() * (i + 1));\n    const temp = cardsCopy[randIndex];\n    cardsCopy[randIndex] = cardsCopy[i];\n    cardsCopy[i] = temp;\n  }\n  return cardsCopy;\n};\n\nexport const setVisible = (cards, cardToSet) =>\n  cards.map(card => {\n    if (card.id === cardToSet.id) {\n      return { ...card, className: 'card visible' };\n    }\n    return card;\n  });\n\nexport const setNotVisible = (cards, card1, card2 = {}) =>\n  cards.map(card => {\n    if (card.id === card1.id) {\n      return { ...card, className: 'card' };\n    } else if (card.id === card2.id) {\n      return { ...card, className: 'card' };\n    }\n    return card;\n  });\n\nexport const setMatched = (cards, card1, card2) =>\n  cards.map(card => {\n    if (card.id === card1.id) {\n      return { ...card, className: 'card matched' };\n    } else if (card.id === card2.id) {\n      return { ...card, className: 'card matched' };\n    }\n    return card;\n  });\n\nexport const resetCards = cards =>\n  cards.map(card => ({ ...card, className: 'card' }));\n\nexport const addResult = (results, result) => {\n  const res = results\n    .concat(result)\n    .sort((a, b) => a - b)\n    .slice(0, 10);\n  try {\n    localStorage.setItem('results', JSON.stringify(res));\n  } catch (e) {\n    console.log(e);\n  }\n  return res;\n};\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Board from './components/Board';\nimport Modal from './components/Modal';\nimport {\n  shuffleCards,\n  setVisible,\n  setNotVisible,\n  setMatched,\n  resetCards,\n  addResult\n} from './utils/utils';\nimport data from './data/data';\n\nfunction App() {\n  const [cards, setCards] = useState(data);\n  const [timer, setTimer] = useState(0);\n  const [cardToCheck, setCardToCheck] = useState(null);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [busy, setBusy] = useState(false);\n  const [results, setResults] = useState([]);\n\n  const [timerId, setTimerId] = useState(null);\n  const [timeOutId, setTimeOutId] = useState(null);\n  const [isOpenModal, setIsOpenModal] = useState(true);\n  const [modalView, setModalView] = useState('start');\n\n  const startGame = () => {\n    setCards(shuffleCards(cards));\n    setTimer(0);\n    setTimerId(setInterval(() => setTimer(seconds => seconds + 1), 1000));\n    closeModal();\n  };\n\n  const flipCard = cardToFlip => {\n    if (!busy) {\n      setCards(setVisible(cards, cardToFlip));\n\n      if (cardToCheck) {\n        checkForCardMatch(cardToFlip);\n        clearTimeout(timeOutId);\n      } else {\n        setCardToCheck(cardToFlip);\n        setTimeOutId(\n          setTimeout(() => {\n            setCards(setNotVisible(cards, cardToFlip));\n            setCardToCheck(null);\n          }, 5000)\n        );\n      }\n    }\n  };\n\n  const checkForCardMatch = card => {\n    if (card.value === cardToCheck.value) {\n      cardMatch(card, cardToCheck);\n    } else {\n      cardMismatch(card, cardToCheck);\n    }\n    setCardToCheck(null);\n  };\n\n  const cardMatch = (card1, card2) => {\n    setBusy(true);\n    setTimeout(() => {\n      setCards(setMatched(cards, card1, card2));\n      setMatchedCards(matchedCards.concat([card1, card2]));\n      setBusy(false);\n    }, 1000);\n  };\n\n  const cardMismatch = (card1, card2) => {\n    setBusy(true);\n    setTimeout(() => {\n      setCards(setNotVisible(cards, card1, card2));\n      setBusy(false);\n    }, 1000);\n  };\n\n  const finishGame = () => {\n    clearInterval(timerId);\n    setModalView('results');\n    openModal();\n    setCards(resetCards(cards));\n    setMatchedCards([]);\n    setResults(addResult(results, timer));\n  };\n\n  const openModal = () => {\n    setIsOpenModal(true);\n  };\n\n  const closeModal = () => {\n    setIsOpenModal(false);\n  };\n\n  useEffect(() => {\n    if (matchedCards.length === cards.length) finishGame();\n    // eslint-disable-next-line\n  }, [matchedCards]);\n\n  useEffect(() => {\n    try {\n      const fromLocalStorage = JSON.parse(localStorage.getItem('results'));\n      if (fromLocalStorage) setResults(fromLocalStorage);\n    } catch (e) {\n      console.log(e);\n    }\n    return () => {\n      clearInterval(timerId);\n      clearTimeout(timeOutId);\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <Modal\n        isOpen={isOpenModal}\n        startGame={startGame}\n        modalView={modalView}\n        setModalView={setModalView}\n        results={results}\n        timer={timer}\n      />\n      <Board cards={cards} timer={timer} flipCard={flipCard} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}